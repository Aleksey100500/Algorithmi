public class lec3 {
    //üìå–ß—Ç–æ —Ç–∞–∫–æ–µ ‚Äú—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫‚Äù
    //üìå–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    //üìå–°—Ç–µ–∫ –∏ –æ—á–µ—Ä–µ–¥—å
    //üìå–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
    //—Å–ø–∏—Å–∫–∏
    //üìå–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    // –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫
    //–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —É–∑–ª–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π
    //—Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–≤—è–∑–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞, –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –£–¥–∞–ª–µ–Ω–∏–µ –≠–ª–µ–º–µ–Ω—Ç–æ–≤, –†–∞–∑–≤–æ—Ä–æ—Ç

    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    // ‚óè –ú–∞—Å—Å–æ–≤—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü\–Ω–∞—á–∞–ª–æ
    //—Å–ø–∏—Å–∫–∞
    // ‚óè –ú–∞—Å—Å–æ–≤—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—É
    //—Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    //–µ–¥–∏–Ω–æ–∂–¥—ã
    // ‚óè –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å




    Node head; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    Node tail; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

    private void add( int value) { //  o(1)
        Node node = new Node();
        node.value = value;
        if (head == null) {
            head = node;
            tail = node;
        } else {
            tail.next = node;
            node.previous = tail;
            tail = node;
        }
    }

    public void add(int value, Node node) { // o(1)
        Node next = node.next;
        Node newNode = new Node();
        newNode.value = value;
        node.next = newNode;
        newNode.previous = node;
        if (next == null) {
            tail = newNode;
        } else {
            next.previous = newNode;
            newNode.next = next;
        }
    }

    private void delete(Node node) { // o(1)
        Node previous = node.previous;
        Node next = node.next;
        if (previous == null) {
            node.previous = null;
            head = next;
        } else {
            if (next == null) {
                previous.next = null;
                tail = previous;
            } else {
                previous.next = next;
                next.previous = previous;
            }
        }
    }
    private Node find(int value) { // o(n)
        Node currentNode = head;
        while (currentNode != null) {
            if ( currentNode.value == value) {
                return currentNode;
            }
            currentNode = currentNode.next;
        }
        return null;
    }

    private void revert () {
        Node currentNode = head;
        while ( currentNode != null ) {
            Node next = currentNode.next;
            Node previous = currentNode.previous;
            currentNode.next = previous;
            currentNode.previous = next;
            if (previous == null) {
                tail = currentNode;
            }
            if (next == null) {
                head = currentNode;
            }
            currentNode = next;
        }
    }

    public static void main(String[] args) {

    }
    public class Node {
        int value;
        Node next;
        Node previous;
    }
}

